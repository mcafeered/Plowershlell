use xfreerdp /u:student /v:<IP_Address> /dynamic-resolution +glyph-cache +clipboard to get into the windows gui

always start with update-help

use -force to make a cmdlet do something without asking

use -Erroraction which specifies what to do with an error when it comes up

use -showwindow to show a man page in a separate windowget_help

 get-childitem -path C:\ -recurse -filter *.pf -name  ----  a script displaying the use of different modules for a command
 switch parameter is boolean, when used the parammeter is one, while not in use its turned off (-recurse) is the switch (boolean operator) 
 
 get-service -name power,Dnscache  ----  can separate multiple values to one parameter via the use of a comma, spaces delimit different parameters
 modules have positional parameters that dont need to be declared and can be found by finding the value out on its own without a parameter 
 ex. get-service power,Dnscache  ----  the -name doesnt need to be declared since powershell finds the first values without a parameter and applies the positional parameter to said value
 
 get-command gets commands that are used in powershell
 use -verb <pattern to search for> to find specific commands 
 can also use -noun <pattern> to find specific commands 
 both of these use astericks to denote whether it starts or stops with the pattern ex. *item or item*
 can also just use get-command *<keyword>* without a parameter to search for said keyword ignoring noun or verb, though this requires the use of astericks
 
 can also use get-help *<keyword>* to also search the help files for commands
 
 can use get-alias -name to find aliases (or use $alias:<alias name>) 
 can use set-alias <alias name> <alias command> to create aliases which can be deleted using del alias:<alias name>
 
 when using variables in powershell variables must be declared and called using a $ ex. $var = 17 
 can still do $var - 1 = 16
 can create multiple variables on one line using commas between calls ex. $var,$var1=17, 23
 you can also chain ='s to make multiple variables equal one number ex. $var1 = $var2 = 17
 when using the get-variable cmdlet you omit the $
 $args an enumerator which enumerates through undeclared input
 $input an enumerator which enumerates all input passed from a function
 $_ or $PSItem contains the current object in the pipeline
 $Profile contains the full path of the powershell profile for the current user
 $null is the void black hole pit of infinite emptiness
 $true and $false are used to decide truity or falsity
 environmental variables are system wide variables that load every time on startup which can be called using $env:<varName> to view what value is being stored in said variable
 remove variables using remove-item variable:<variable name>
 variables can have their type changed (ex. string integer) which can be viewd using <variable>.gettype().name
 can force something to be an integer using [int]$int="27" using the [int or float or string or array] to change the type temporarily
 powershell automatically converts hexadecimal into human-readable format
 
 create an array using $array=@() to create an empty array
 $number_arr= 4,5,6 is also considered an array by powershell, one variable holding multiple values
 [array]$blank_array="" when creating an array in this way you must have some sort of value attributed to said array which means it must have 1 value when counted (throws off indexes)
 can get the count of indexes in an array using <name of array>.count for the number of objects in said array
 arrays can have values added to them using <name of array> += <value>
 $array -is [array] is a way to write "is this object an array?"
 $poly_arr = (get-computerinfo), "help me, im trapped" , 6472 is a polymorphic array which contains many different values
 index numbers can be referenced using <array>[<index>] or <arrray> | select-object -index <number> -1 still indexes the last index in the array while also referencing multiple indexes using [1,5,456]
 for sequential numbers just do it like bash 4..50 which iterates through the entire range of given numbers
 get-service | format-table name, status
 arrays can be nested within arrays to create bigger arrays which are created using <array name> = @,&,<another array>,! 
 to reference the other array first you give the index of the second array then give the index of the value you want within the array ex <array name>[2][2]
 when arrays are nested the starting array fills out the empty space with null values based off the size of the biggest array within the array, making null values where there is nothing
 multi dimensional arrays are arrays within arrays within arrays... ex <array>=tri, cir, {1,2,<array>} (this is only an interpretation for humans to understand)
 
 visual - multidimensional 
 v,
 a, b, c, 1
 x,       2
          3
          
hash tables are called using @{} for an empty one which are organized as @{key="value" ; key2="value2"} which can also be put in a variable similar to an array
you can add key value pairs to a script using <hashtable>.<key> = "<value>" or <hashtable>["<key>"] = "<value>" or <hashtable>.add("<key>","<value>")
arrays can be values inside of hash tables ex <ordered hash>."<key>" = @("<value>","<value>","<value>","<value>","<value>")
ordered hash tables are created using [ordered]@{} which can have values added using <ordered hash>["<key>"] = "<value>"
values can be called from hashes using <hashtable>.'<key>' or <hashtable>['<key>'] all keys or values can be viewed using <hashtable>.keys/values
more than one key can be called at once ex <hashtable>["<key>","<key>"]
you can change a keys value by calling it then setting it equal to something else ex <hashtable>['<key>'] = "<new value>"

get-member gets the methods and properties of objects like other commands which can either have the object piped into it which gives more specific methods and properties while get-member -inputobject <object> gives the methods and properties for objects in general
the methods and properties can then be called using (<object> <possible value>).<property or method> to view what they are for that specific configuration
methods can also be used by doing .<method>() to actually do the method on the object

write-host sends information straight to the screen while write-output puts values in the pipeline which can be further altered before being printed
format-list/wide/table creates lists, tables and wide outputs, like how format-table can make tables only show you the values you want ex. get-service | format-table name, status

get-service | sort-object -property status sorts based off the status property found in get-member for get-service
get-service | group-object -property status groups values based off the property of status
get-service | sort-object status, name sorts on the status then name properties

get-service | where-object { $_.status -eq "running" } running this only displays the running services 
get-process | select-object -first 10 this only lists the top 10 objects which can also be used to show only specific properties via the -expandproperty 

get-process | where-object processname -ne "idle" | sort-object starttime | select-object -last 10 | format-table processname, starttime gets the 10 processes that have been running the longest on the system

sort-object | get-unique gets only one of each value from an output

measure-object length gets the length of an object like get-childitem which gets the total amount of files and can have -average -maximum -minimum -sum to get other values of file size aswell

compare-object comapres 2 different outputs

if you just have one value -eq to another the output will be true or false, but comparing a value that is bigger on the left side will only print what it matches on the right side ex. "abc", "def" -eq "abc" would print abc which works the same way but opposite for -ne 
with greater than or less than if the value on the left is bigger in number of values compared to the left only the bigger values will be printed ex. 1,2,3 -gt 2 only 3 will be printed
it works the same way with -le and -ge which with more values on the left will print the same value and anything above or below it
-like uses wildcards to compare strings like ? or * as well as regex like [a-z] working the same as -notlike but returning the opposite value
-match can only use regex patterns to compare text, after doing a match comparison an array called $matches is created which can have values pulled out from it
-contains sees if a certain element is within an object like a list or array where the list/array has to be on the left while -in requires the list/array to be on the right
*to make a condtional be case sensitive you can put a c infront of any of the operators ex. -ceq or - cnotlike*
comparison operators can be chained together using -and or -or to have multiple conditionals be true or any one of them

where-object {} finds only specific things and prints them out and filters everything else out ex. get-childitem | where-object {$_.Length -gt 100} which only shows files bigger than 100

the syntax for if statements is 
if (<condition>) {
<commands>
}
elseif () {
}
else {
}

switch statements tests against every condition which means it can pop multiple as opposed to stopping on the first true statement ex.
switch(<value>)
{
     {<condition>} {
     }
     {<condition>} {
     }
     {<condition>} {
     }
}



