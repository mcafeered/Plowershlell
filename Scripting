Q1 update-help
Q2 get-process and start/stop-process
Q3 Get-Service
Q4 Write-Output
Q5 clear/get/new/remove/set-variable
Q6 get-command
Q7 Read-Host




Q1 Get-Process
Q2 Get-Process -name s*
Q3 gal == get-alias - dir ==  get-childitem - echo == write-output - ? == where-object - % == ForEach-Object - ft == Format-Table
Q4 get-netfirewallrule
Q5 new-alias -name gh -value get-help




Q1 $var1 = 27
Q2 $var2 = 5
Q3 $sum = $var1+$var2
Q4 $sub = $var1-$var2
Q5 $prod = $var1*$var2
Q6 $quo = $var1/$var2
Q7 "$var1 + $var2 = $sum"
Q8 "$var1 - $var2 = $sub"
Q9 "$var1 * $var2 = $prod"
Q10 "$var1 / $var2 = $quo" 




Q1 $a = get-random -Minimum -10 -Maximum 0
   $b = get-random -Minimum 1 -Maximum 20
   $array = $a..$b

Q2 $array2 = $b..$a

OR

   $reverse = $array[(array.length-1)..0]
   $reverse
   
   
   
For the sake of saving time Im gonna do the entire exercise just for mary

Q1 $employee1 = @{}
Q2 $employee1.add("Mary","Hopper") and $employee1.add("001","Software Developer")
Q3 $employee1.add("Username","mhopper001")
Q4 $employee1['001']="Software Lead"
Q5 $employee1.add("Status","Management")




Q1 get-process | where-object processname -ne "idle" | sort-object starttime | select-object -first 1 -last 1 -property starttime
Q2 get-date | select-object dayofweek
Q3 get-hotfix
Q4 get-hotfix | sort-object -property installedon | Select-Object Installedon, HotFixId
Q5 get-hotfix | sort-object -property Description | Select-Object installedon, hotfixid, Description




$Hostinfo = New-Object object

$version = Get-WmiObject Win32_OperatingSystem | Select-Object -expandproperty version 
$name = Get-WmiObject Win32_ComputerSystem | Select-Object -ExpandProperty name
$manufacturer = Get-WmiObject Win32_Bios | Select-Object -ExpandProperty Manufacturer
$disk = Get-WmiObject Win32_logicaldisk | Select-Object -ExpandProperty __path
$OS = Get-ComputerInfo | Select-Object -ExpandProperty osname

Add-Member -MemberType NoteProperty -Name ComputerName -Value $name -InputObject $Hostinfo

Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $OS -InputObject $Hostinfo

Add-Member -MemberType NoteProperty -Name Version -Value $version -InputObject $Hostinfo

Add-Member -MemberType NoteProperty -Name Manufacturer -Value $manufacturer -InputObject $Hostinfo

Add-Member -MemberType NoteProperty -Name Disks -Value $disk -InputObject $Hostinfo




$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"

if ($line1 -match '\w\w\d\d\d\d') {
    write-host $matches[0] "is in line1"
}
else {
    write-host "No model number found on line1"
}

if ($line2 -match '\w\w\d\d\d\d') {
    write-host $matches[0] "is in line2"
}
else {
    write-host "No model number found on line2"
}


<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    return ($var1 * $var2 * $var3 * $var4)
}
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach($whatever in $arr) {
        if($whatever[0] -eq $key){
            return $whatever[9]
            }
        }
    
        return -1
}
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    $int=0
    $count=0
    while ([int]$int -ne -1){
        [int]$int = read-host -prompt "Please enter an integer"
        if ($int -gt $count) {
            $count = $int
        } 
    }
    return $count
}
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    return (Get-Content -path $filename)[$whichline]
}
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    Get-ChildItem -path $path | sort-object -Property name
}
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    Begin {
        $total=0
    }

    Process {
        $total=$total+$_ 
    }

    End {
        return $total
    }

}
function q7 {
	<# Return only those commands whose noun is process #>
    get-command -noun process
}
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    return "Powershell is $adjective"
}
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    if ($addr -match '^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$') {
        return $true
    }
    else {
        return $false
    }
}
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
       $compare=(get-filehash $filepath | select-object -ExpandProperty hash)
       if ($compare -ne $lasthash) { 
       return $true 
       }
       else { 
       return $false 
       } 
}
